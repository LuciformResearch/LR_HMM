-- auto-generated by scripts/schema_codegen.ts
CREATE EXTENSION IF NOT EXISTS vector;

-- conversations
CREATE TABLE IF NOT EXISTS conversations (
  id SERIAL PRIMARY KEY,
  slug TEXT UNIQUE NOT NULL,
  title TEXT NOT NULL,
  created_date DATE,
  total_chars INT,
  total_lines INT
);

-- summaries
CREATE TABLE IF NOT EXISTS summaries (
  id BIGSERIAL PRIMARY KEY,
  conversation_id INT REFERENCES conversations(id) ON DELETE CASCADE,
  level INT CHECK (level >= 1),
  idx INT,
  covers JSONB,
  content TEXT,
  content_hash TEXT,
  char_count INT,
  topics TEXT[],
  meta JSONB,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  range_start_ts TIMESTAMPTZ,
  range_end_ts TIMESTAMPTZ
);
-- Ensure columns exist on legacy summaries
DO $$ BEGIN
  BEGIN
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS idx INT;
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS content_hash TEXT;
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS topics TEXT[];
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS meta JSONB;
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS range_start_ts TIMESTAMPTZ;
    ALTER TABLE summaries ADD COLUMN IF NOT EXISTS range_end_ts TIMESTAMPTZ;
  EXCEPTION WHEN others THEN NULL; END;
END $$;

-- Unique fallback on content hash
CREATE UNIQUE INDEX IF NOT EXISTS summaries_conv_level_hash_uniq_idx
  ON summaries (conversation_id, level, content_hash);

-- embeddings
CREATE TABLE IF NOT EXISTS embeddings (
  id BIGSERIAL PRIMARY KEY,
  conversation_id INT REFERENCES conversations(id) ON DELETE CASCADE,
  ref_type TEXT CHECK (ref_type IN ('message','summary')),
  ref_id BIGINT NOT NULL,
  provider TEXT CHECK (provider IN ('vertex','studio')) NOT NULL,
  model TEXT NOT NULL,
  dim INT NOT NULL,
  vector vector(768) NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS embeddings_conversation_idx ON embeddings (conversation_id);
CREATE INDEX IF NOT EXISTS embeddings_ref_idx ON embeddings (ref_type, ref_id);
-- Align vector column to fixed dimension if needed
DO $$ BEGIN
  BEGIN
    ALTER TABLE embeddings ALTER COLUMN vector TYPE vector(768) USING vector;
  EXCEPTION WHEN others THEN NULL; END;
END $$;

CREATE INDEX IF NOT EXISTS embeddings_vec_cos_idx ON embeddings USING ivfflat (vector vector_cosine_ops) WITH (lists = 100);

-- Ensure columns exist on legacy embeddings
DO $$ BEGIN
  BEGIN
    ALTER TABLE embeddings ADD COLUMN IF NOT EXISTS provider TEXT;
    ALTER TABLE embeddings ADD COLUMN IF NOT EXISTS model TEXT;
    ALTER TABLE embeddings ADD COLUMN IF NOT EXISTS dim INT;
    -- vector column may already exist with different dim; keep as-is to avoid destructive changes.
    ALTER TABLE embeddings ADD COLUMN IF NOT EXISTS created_at TIMESTAMPTZ NOT NULL DEFAULT NOW();
  EXCEPTION WHEN others THEN NULL; END;
END $$;

-- contexts (for RAG/context composer)
CREATE TABLE IF NOT EXISTS contexts (
  id BIGSERIAL PRIMARY KEY,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  slug TEXT NOT NULL,
  query TEXT NOT NULL,
  params_json JSONB,
  items_json JSONB,
  expanded_json JSONB,
  budget_json JSONB,
  metrics_json JSONB
);
CREATE INDEX IF NOT EXISTS contexts_slug_idx ON contexts (slug);
